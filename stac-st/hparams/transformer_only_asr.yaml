# ############################################################################
# Model: E2E ST with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder beamsearch
# Tokens: BPE
# losses: CTC + NLL (+Label Smoothing)
# Training: Fisher-Callhome
# Authors: ZULUAGA-GOMEZ, JUAN
# ############################################################################


# This specific flag tells the model to use transcripts and translations in a multitask fashion.
# If set to 1, we'd not use the translate/transcribe special tokens
number_of_tasks: 1
# flags for whether to use XT token and turn token
use_xt_token: True
use_turn_token: True
# whether to perform evaluation or not!
no_eval: True # this flag controls whether to perform evaluation
debug: False
seed: 8886
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder_name: results/transformer_small/
output_folder: !ref <output_folder_name>/<seed>
ckpt_interval_minutes: 600 # save checkpoint every N min
bleu_file: !ref <output_folder>/bleu.txt
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

data_folder: !PLACEHOLDER # Path to the folder generated by the preparation script

# Tokenizer init (it is actually a BPE model)
tokenizer_file: !PLACEHOLDER # Path to the file of the Tokenizer model (.model)
tokenizer: !new:sentencepiece.SentencePieceProcessor

# Data files
train_splits: "fisher-callhome-train-30s/data-turns-asr"
# dev_splits: "dev-30s/data-turns-asr"
dev_splits: "dev/data-asr"
test_splits_4_translations: ""
test_splits_1_translations: [
    "dev-30s/data-turns-asr", 
    "dev2-30s/data-turns-asr", 
    "test-30s/data-turns-asr", 
    "callhome-devtest-30s/data-turns-asr", 
    "callhome-evltest-30s/data-turns-asr", 
    "dev/data-asr", # these are the standard datasets, we need to check if there's degradation
    "dev2/data-asr", 
    "test/data-asr",
    "callhome-devtest/data-asr",
    "callhome-evltest/data-asr",
]

# Trainer settings
batch_size: 4 # this works for 2 GPUs with 11GB
test_batch_size: 4
grad_accumulation_factor: 16
max_grad_norm: 5.0
loss_reduction: batchmean
sorting: random
num_workers: 48
auto_mix_prec: True # speeds up training
nonfinite_patience: 100

# stages related parameters
lr_adam: 0.0005

# The training will either stops at number_of_epochs or optimizer_step_limit
# I.e. the first that is reached.
number_of_epochs: 1000

# There's an issue of passing optimizer_step_limit from CLI and assign it 
scheduler_step_limit: 75000
optimizer_step_limit: !ref <scheduler_step_limit>

# In this setup, first warmup, then linear decay, then cooldown to 0
n_warmup_steps: 15000
# This is equivalent to optimizer_step_limit - warmup
# Necessary to do to have a linear warmup and linear decay directly
# If cooldown < optimizer_step_limit - warmup then a third step with a slower
# decay is applied in the middle (see the implementation of the scheduler)
cooldown: 15000 # cooldowns takes lr to 0 the last x nb of steps

# Features
sample_rate: 16000
n_fft: 400
n_mels: 80

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: True
max_batch_len: 450
max_batch_len_val: 200 # we reduce it as the beam is much wider (VRAM)
num_bucket: 50

dynamic_batch_sampler:
    max_batch_len: !ref <max_batch_len>
    max_batch_len_val: !ref <max_batch_len_val>
    num_buckets: !ref <num_bucket>
    shuffle_ex: True # if true re-creates batches at each epoch shuffling examples.
    batch_ordering: random
    max_batch_ex: 128

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

test_dataloader_opts:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

####################### Model parameters ###########################
# Multi-task parameters
# ctc_weight: 0 means no CTC loss is applied
# ctc_weight: between 0 and 1 means hybrid CTC and Attention
ctc_weight: 0.3

# Outputs
blank_index: 0
pad_index: 0
bos_index: 1
eos_index: 2

# special indexes
sou: 3
eou: 4 
word_sil: 5
sil_word: 6
turn: 7
xt: 8

# Decoding parameters
label_smoothing: 0.1
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 10
valid_beam_size: 5
test_beam_size: 10
ctc_weight_decode: 0

# Transformer
d_model: 256
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 1024
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: 5000
attention_type: "regularMHA" # "RelPosMHAXL" or "regularMHA" (desired)
encoder_module: transformer

############################## models ################################
CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (256, 256)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)

# Transformer: !new:speechbrain.lobes.models.transformer.TransformerST.TransformerST # yamllint disable-line rule:line-length
Transformer: !new:modules.TransformerMultiTask.TransformerMultiTask
    input_size: 5120
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: !ref <encoder_module>
    attention_type: !ref <attention_type>
    normalize_before: True
    causal: False

# always used, or output for ST
seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

# only when multi-task setting is used
ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# optimizer
Adam: !name:torch.optim.AdamW
    lr: !ref <lr_adam>

# VALID AND TEST BEAM SEARCHERS are from a new Model! Check file.
# we provide a function to append source and target language at decoding time
valid_search: !new:modules.mutitask_decoder.S2SMultiTaskTransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    using_eos_threshold: False
    length_normalization: False

test_search: !new:modules.mutitask_decoder.S2SMultiTaskTransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    using_eos_threshold: True
    length_normalization: True
    temperature: 1.15
    lm_weight: 0
    temperature_lm: 0

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

lr_scheduler: !new:speechbrain.nnet.schedulers.WarmCoolDecayLRSchedule
   lr: !ref <lr_adam>
   warmup: !ref <n_warmup_steps>
   cooldown: !ref <cooldown>
   total_steps: !ref <scheduler_step_limit>
   decay_every: !ref <scheduler_step_limit>*0.1

# Checkpoint setting
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        scheduler: !ref <lr_scheduler>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

augmentation: !new:speechbrain.lobes.augment.SpecAugment
    time_warp: True
    time_warp_window: 5
    time_warp_mode: bicubic
    freq_mask: True
    n_freq_mask: 2
    time_mask: True
    n_time_mask: 2
    replace_with_zero: False
    freq_mask_width: 30
    time_mask_width: 40

speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: [90, 100, 110]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

bleu_computer: !name:speechbrain.utils.bleu.BLEUStats
    merge_words: False
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats
error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

# Pretrain the tokenizer
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <output_folder>/save/tokenizer
    loadables:
        tokenizer: !ref <tokenizer>
    paths:
        tokenizer: !ref <tokenizer_file>

